package shared.encryption.algorithms;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.security.*;

/**
 * The <code>RSA</code> class represents the asymmetric encryption technique that
 * uses two different keys as public and private keys to preform encryption and
 * decryption.
 */
public class RSA {

    private PrivateKey privateKey;
    private PublicKey publicKey;

    /**
     * Creates a new <code>RSA</code> object by generating a pair of keys
     *
     * @throws NoSuchAlgorithmException when RSA algorithm was not found
     */
    public RSA () throws NoSuchAlgorithmException {
        generateKeyPair();
    }

    /**
     * Method that generates a pair of public and private keys.
     *
     * @throws NoSuchAlgorithmException when RSA algorithm was not found
     */
    private void generateKeyPair () throws NoSuchAlgorithmException {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        this.privateKey = keyPair.getPrivate();
        this.publicKey = keyPair.getPublic();
    }

    /**
     * Method that encrypts a given message using the private key.
     *
     * @param message Message to be encrypted
     * @param publicKey Public key of the receiver
     * @return The encrypted message
     * @throws NoSuchPaddingException when a particular padding mechanism is requested but is not available in the environment
     * @throws NoSuchAlgorithmException when RSA algorithm was not found
     * @throws InvalidKeyException when the given key was not valid (invalid encoding, wrong length, uninitialized, etc)
     * @throws IllegalBlockSizeException when the length of data provided to a block cipher does not match the block size
     * @throws BadPaddingException when a particular padding mechanism is expected for the input data but the data is not padded properly
     */
    public byte[] encrypt (byte[] message, PublicKey publicKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE , publicKey);
        return cipher.doFinal( message );
    }

    /**
     *
     * @param message The message to be decrypted
     * @return The decrypted message
     * @throws NoSuchPaddingException when a particular padding mechanism is requested but is not available in the environment
     * @throws NoSuchAlgorithmException when RSA algorithm was not found
     * @throws InvalidKeyException when the given key was not valid (invalid encoding, wrong length, uninitialized, etc)
     * @throws IllegalBlockSizeException when the length of data provided to a block cipher does not match the block size
     * @throws BadPaddingException when a particular padding mechanism is expected for the input data but the data is not padded properly
     */
    public byte[] decrypt (byte[] message) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE , this.privateKey);
        return cipher.doFinal(message);
    }

    /**
     * Method that returns the public key generated by RSA
     *
     * @return Clients public key
     */
    public PublicKey getPublicKey () {
        return publicKey;
    }
}